import { format } from "prettier";
import { readFile, writeFile } from "node:fs/promises";

export interface CodeEntry {
  type: "matter" | "indexer" | "counter";
  code: string;
  name: string;
  hs: number;
  ss: number;
  xs: number | null;
  fs: number | null;
  ls: number | null;
}

const codes = JSON.parse(await readFile("codec.json", "utf-8")) as CodeEntry[];

function printSize(c: CodeEntry) {
  return `  ["${c.code}"]: { hs: ${c.hs}, ss: ${c.ss}, xs: ${c.xs}, fs: ${c.fs ?? "null"}, ls: ${c.ls ?? "null"} },`;
}

const source: string[] = [
  "// This file is generated by scripts/generate-encoding.ts",
  "export type CodeSize = { hs: number; ss: number; xs: number | null, fs: number | null, ls: number | null };",
  "export const MatterCode = {",
  codes
    .filter((c) => c.type === "matter")
    .map((c) => `  ${c.name}: "${c.code}",`)
    .join("\n"),
  "}",
  "export const MatterCodeTable: Record<string, CodeSize> = {",
  codes
    .filter((c) => c.type === "matter")
    .map(printSize)
    .join("\n"),
  "}",
  "export const IndexerCode = {",
  codes
    .filter((c) => c.type === "indexer")
    .map((c) => `  ${c.name}: "${c.code}",`)
    .join("\n"),
  "}",
  "export const IndexerCodeTable: Record<string, CodeSize> = {",
  codes
    .filter((c) => c.type === "indexer")
    .map(printSize)
    .join("\n"),
  "}",
  "export const CounterCode = {",
  codes
    .filter((c) => c.type === "counter")
    .map((c) => `  ${c.name}: "${c.code}",`)
    .join("\n"),
  "}",
  "export const CounterCodeTable: Record<string, CodeSize> = {",
  codes
    .filter((c) => c.type === "counter")
    .map(printSize)
    .join("\n"),
  "}",
];

const outfile = "src/parser/codes.ts";
const result = await format(source.join("\n"), { parser: "typescript", filepath: outfile });
await writeFile(outfile, result);
